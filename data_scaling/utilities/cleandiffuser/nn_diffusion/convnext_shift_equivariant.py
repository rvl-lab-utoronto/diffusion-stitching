from typing import List, Optional

import einops
import numpy as np
import torch
import torch.nn as nn

from ..nn_diffusion import BaseNNDiffusion
from ..utils import GroupNorm1d
import torch.nn.functional as F
import matplotlib.pyplot as plt
import math
class Block(nn.Module):
    r""" ConvNeXt Block. There are two equivalent implementations:
    (1) DwConv -> LayerNorm (channels_first) -> 1x1 Conv -> GELU -> 1x1 Conv; all in (N, C, H, W)
    (2) DwConv -> Permute to (N, H, W, C); LayerNorm (channels_last) -> Linear -> GELU -> Linear; Permute back
    We use (2) as we find it slightly faster in PyTorch
    
    Args:
        dim (int): Number of input channels.
        drop_path (float): Stochastic depth rate. Default: 0.0
        layer_scale_init_value (float): Init value for Layer Scale. Default: 1e-6.
    """
    def __init__(self, dim, drop_path=0., layer_scale_init_value=1e-6):
        super().__init__()
        self.dwconv = nn.Conv1d(dim, dim, kernel_size=7, padding=3, groups=dim,padding_mode='replicate') # depthwise conv
        self.norm = LayerNorm(dim, eps=1e-6)
        #self.norm = LayerNorm2(dim)
        #self.norm = nn.Identity()
        self.pwconv1 = nn.Linear(dim, 4 * dim) # pointwise/1x1 convs, implemented with linear layers
        self.act = nn.GELU()
        self.pwconv2 = nn.Linear(4 * dim, dim)
        self.gamma = nn.Parameter(layer_scale_init_value * torch.ones((dim)), 
                                    requires_grad=True) if layer_scale_init_value > 0 else None
        self.drop_path = nn.Identity()

    def forward(self, x):
        input = x
        x = self.dwconv(x)
        x = x.permute(0, 2, 1) # (N, C, H, W) -> (N, H, W, C)
        x = self.norm(x)
        x = self.pwconv1(x)
        x = self.act(x)
        x = self.pwconv2(x)
        if self.gamma is not None:
            x = self.gamma * x
        x = x.permute(0, 2, 1) # (N, H, W, C) -> (N, C, H, W)

        x = input + self.drop_path(x)
        return x


def _trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.
    # Values are generated by using a truncated uniform distribution and
    # then using the inverse CDF for the normal distribution.
    # Get upper and lower cdf values
    l = norm_cdf((a - mean) / std)
    u = norm_cdf((b - mean) / std)

    # Uniformly fill tensor with values from [l, u], then translate to
    # [2l-1, 2u-1].
    tensor.uniform_(2 * l - 1, 2 * u - 1)

    # Use inverse cdf transform for normal distribution to get truncated
    # standard normal
    tensor.erfinv_()

    # Transform to proper mean, std
    tensor.mul_(std * math.sqrt(2.))
    tensor.add_(mean)

    # Clamp to ensure it's in the proper range
    tensor.clamp_(min=a, max=b)
    return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    
    with torch.no_grad():
        return _trunc_normal_(tensor, mean, std, a, b)

class LayerNorm(nn.Module):
    r""" LayerNorm that supports two data formats: channels_last (default) or channels_first. 
    The ordering of the dimensions in the inputs. channels_last corresponds to inputs with 
    shape (batch_size, height, width, channels) while channels_first corresponds to inputs 
    with shape (batch_size, channels, height, width).
    """
    def __init__(self, normalized_shape, eps=1e-6, data_format="channels_last"):
        super().__init__()
        self.weight = nn.Parameter(torch.ones(normalized_shape))
        self.bias = nn.Parameter(torch.zeros(normalized_shape))
        self.eps = eps
        self.data_format = data_format
        if self.data_format not in ["channels_last", "channels_first"]:
            raise NotImplementedError 
        self.normalized_shape = (normalized_shape, )
    
    def forward(self, x):
        if self.data_format == "channels_last":
            return F.layer_norm(x, self.normalized_shape, self.weight, self.bias, self.eps)
        elif self.data_format == "channels_first":
            u = x.mean(1, keepdim=True)
            s = (x - u).pow(2).mean(1, keepdim=True)
            x = (x - u) / torch.sqrt(s + self.eps)
            x = self.weight[:, None] * x + self.bias[:, None]
            return x

class ConvNext1dShiftEq(BaseNNDiffusion):
    def __init__(
            self,
            in_dim: int,
            emb_dim: int = 32, # goes unused, here for polymorphism compatibility
            timestep_emb_type: str = "positional",
            timestep_emb_params: Optional[dict] = None,
            use_timestep_emb: bool = True, # goes unused, here for polymorphism compatibility
            padding_type = 'zeros', # goes unused, here for polymorphism compatibility
            depths=[3, 3, 9, 3], 
            dims=[96, 192, 384, 768],
            layer_scale_init_value=1e-6
            ):
        """ NOTE about various ConvNext sizes:
            (def) tiny: depths=[3, 3, 9, 3], dims=[96, 192, 384, 768]
                  small: depths=[3, 3, 27, 3], dims=[96, 192, 384, 768]
                  base: depths=[3, 3, 27, 3], dims=[128, 256, 512, 1024]
                  large: depths=[3, 3, 27, 3], dims=[192, 384, 768, 1536]
                  xlarge: depths=[3, 3, 27, 3], dims=[256, 512, 1024, 2048]
            """
        super().__init__(emb_dim, timestep_emb_type, timestep_emb_params)


        self.downsample_layers = nn.ModuleList() # stem and 3 intermediate downsampling conv layers
        stem = nn.Sequential(
            nn.Conv1d(in_dim, dims[0], kernel_size=7, stride=1,padding=3,padding_mode='replicate'),
            LayerNorm(dims[0], eps=1e-6, data_format="channels_first")
            #LayerNorm2(dims[0])
        )
        self.downsample_layers.append(stem)
        for i in range(3):
            downsample_layer = nn.Sequential(
                    LayerNorm(dims[i], eps=1e-6, data_format="channels_first"),
                    #LayerNorm2(dims[i]),
                    nn.Conv1d(dims[i], dims[i+1], kernel_size=7, stride=1,padding=3,padding_mode='replicate'),
                    
            )
            self.downsample_layers.append(downsample_layer)

        self.stages = nn.ModuleList() # 4 feature resolution stages, each consisting of multiple residual blocks
        drop_path_rate = 0.
        dp_rates=[x.item() for x in torch.linspace(0, drop_path_rate, sum(depths))] 
        cur = 0
        for i in range(4):
            stage = nn.Sequential(
                *[Block(dim=dims[i], drop_path=dp_rates[cur + j], 
                layer_scale_init_value=layer_scale_init_value) for j in range(depths[i])]
            )
            self.stages.append(stage)
            cur += depths[i]

        #self.norm = nn.LayerNorm(dims[-1], eps=1e-6) # final norm layer
        self.norm = nn.Identity()

        self.final_conv = nn.Conv1d(dims[-1], in_dim, kernel_size=7, stride=1,padding=3,padding_mode='replicate')

        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, (nn.Conv1d, nn.Linear)):
            trunc_normal_(m.weight, std=.02)
            nn.init.constant_(m.bias, 0)
    
    def forward_features(self, x):
        for i in range(4):
            #print(x.shape)
            x = self.downsample_layers[i](x)
            x = self.stages[i](x)
        return x

    def forward(self,
                x: torch.Tensor, noise: torch.Tensor,
                condition: Optional[torch.Tensor] = None):
        assert x.shape[1] & (x.shape[1] - 1) == 0, "Ta dimension must be 2^n"
        x = x.permute(0, 2, 1)
        x = self.forward_features(x)
        x = self.final_conv(x)
        x = x.permute(0, 2, 1)
        return x
